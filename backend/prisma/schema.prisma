    // This is your Prisma schema file,
    // learn more about it in the docs: https://pris.ly/d/prisma-schema

    generator client {
      provider = "prisma-client-js"
    }

    datasource db {
      provider = "postgresql"
      url      = env("DATABASE_URL")
    }

    model User {
      id        String   @id @default(cuid())
      email     String   @unique
      password  String   // Will be hashed
      name      String?
      role      UserRole @default(STUDENT) // STUDENT or TEACHER

      // Student specific
      rollNumber String? @unique // Assuming roll number is unique for students
      program    String? // e.g., "B.Tech CSE"
      year       Int?    // e.g., 2024

      // Teacher specific
      department     String? // e.g., "ECE", "CSE"
      areasOfExpertise String[] // Array of strings

      // Relationships
      createdGroups Group[] @relation("GroupLeader") // Groups where this user is a leader
      memberOfGroups Group[] @relation("GroupMembers") // Groups this user is a member of
      projectProposals Project[] @relation("ProposedBy") // Projects proposed by this user/group (if leader initiates)
      supervisedProjects Project[] @relation("SupervisedByTeacher") // Projects supervised by this teacher
      submissions   Submission[] @relation("SubmittedByUser") // Documents submitted by this user
      feedbacks     Feedback[] @relation("FeedbackByTeacher") // Feedbacks given by this teacher
      meetingsRequested Meeting[] @relation("RequestedByStudentOrGroup") // If a student requests
      meetingsWithTeacher Meeting[] @relation("TeacherForMeeting") // Meetings for the teacher
      meetingsWithStudentGroup Meeting[] @relation("StudentGroupForMeeting") // Meetings for the student group
      sentMessages  Message[] @relation("MessageSender")
      availability  TeacherAvailability[] @relation("TeacherAvailability")
      sentGroupInvitations GroupInvitation[] @relation("SentGroupInvitations")
      receivedGroupInvitations GroupInvitation[] @relation("InvitedToGroup")

      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt
    }

    enum UserRole {
      STUDENT
      TEACHER
    }

    model Group {
      id          String @id @default(cuid())
      name        String @unique // Assuming group names are unique for simplicity, or remove unique
      leaderId    String
      leader      User   @relation("GroupLeader", fields: [leaderId], references: [id])
      members     User[] @relation("GroupMembers") // Many-to-many with User for members
      project     Project? // A group can have one active project (as per "approved proposal should transition into an active project")
      invitations GroupInvitation[]

      // For tracking invitations (simplified, could be a separate model)
      // pendingInvitations String[] // User emails or IDs

      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt
    }

    model Project {
      id            String    @id @default(cuid())
      title         String
      description   String
      status        ProjectStatus @default(PROPOSED) // PROPOSED, APPROVED, REJECTED, ACTIVE, COMPLETED
      rejectionReason String?

      groupId       String    @unique // A project belongs to one group
      group         Group     @relation(fields: [groupId], references: [id])

      proposedById  String?   // Who in the group proposed it (e.g., leader) - might be redundant if group leader always does
      proposedBy    User?     @relation("ProposedBy", fields: [proposedById], references: [id])

      supervisorId  String?   // Becomes non-null when approved
      supervisor    User?     @relation("SupervisedByTeacher", fields: [supervisorId], references: [id])

      milestones    Milestone[]
      submissions   Submission[]
      feedbacks     Feedback[]
      meetings      Meeting[] @relation("ProjectMeetings")
      chatMessages  Message[] @relation("ProjectChat")


      createdAt     DateTime @default(now())
      approvedAt    DateTime?
      updatedAt     DateTime @updatedAt
    }

    enum ProjectStatus {
      PROPOSED
      APPROVED
      REJECTED
      ACTIVE    // After approval
      COMPLETED // After all milestones done
    }

    model Milestone {
      id          String  @id @default(cuid())
      title       String
      description String?
      isCompleted Boolean @default(false)
      lastUpdatedBy String? // User ID of who last updated it
      // lastUpdatedUser User? // Optional: relation to User model

      projectId String
      project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade) // If project deleted, milestones deleted

      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt
      dueDate   DateTime?
    }

    model Submission {
      id          String @id @default(cuid())
      fileName    String // Original file name
      filePath    String // Path on server or object storage key
      description String?
      fileType    String @default("PDF") // As per spec

      uploaderId  String
      uploader    User   @relation("SubmittedByUser", fields: [uploaderId], references: [id])

      projectId   String
      project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

      feedbacks   Feedback[] // Feedbacks related to this specific submission

      createdAt   DateTime @default(now())
      updatedAt   DateTime @updatedAt
    }

    model Feedback {
      id        String @id @default(cuid())
      comment   String
      rating    Int?   // Optional rating

      teacherId String
      teacher   User   @relation("FeedbackByTeacher", fields: [teacherId], references: [id])

      projectId String
      project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

      submissionId String? // Optional: if feedback is for a specific submission
      submission   Submission? @relation(fields: [submissionId], references: [id])

      milestoneId String? // Optional: if feedback is for a specific milestone
      // milestone Milestone? @relation(fields: [milestoneId], references: [id]) // Requires Milestone to have Feedback[]

      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt
    }

    model TeacherAvailability {
      id          String @id @default(cuid())
      teacherId   String
      teacher     User   @relation("TeacherAvailability", fields: [teacherId], references: [id])
      dayOfWeek   Int    // 0 for Sunday, 1 for Monday, ..., 6 for Saturday
      startTime   String // e.g., "09:00"
      endTime     String // e.g., "17:00"

      meetings    Meeting[] @relation("AvailabilitySlotForMeeting")

      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt

      @@unique([teacherId, dayOfWeek, startTime, endTime]) // Ensure a teacher doesn't define overlapping slots this way simply
    }

    model Meeting {
      id          String        @id @default(cuid())
      reason      String
      status      MeetingStatus @default(REQUESTED) // REQUESTED, CONFIRMED, REJECTED, CANCELLED
      proposedStartTime DateTime
      proposedEndTime   DateTime
      actualStartTime   DateTime? // When confirmed
      actualEndTime     DateTime? // When confirmed
      alternativeTimeProposedByTeacher Boolean @default(false)

      // Who requested it (could be any group member)
      requesterId String
      requester   User   @relation("RequestedByStudentOrGroup", fields: [requesterId], references: [id])

      // The project this meeting is for
      projectId String
      project   Project @relation("ProjectMeetings", fields: [projectId], references: [id])

      // The teacher involved
      teacherId String
      teacher   User   @relation("TeacherForMeeting", fields: [teacherId], references: [id])

      // The student group involved (derived from project, but can be explicit for clarity or future needs)
      studentGroupId String?
      studentGroup User? @relation("StudentGroupForMeeting", fields: [studentGroupId], references: [id])


      // If linked to a specific availability slot
      availabilitySlotId String?
      availabilitySlot   TeacherAvailability? @relation("AvailabilitySlotForMeeting", fields: [availabilitySlotId], references: [id])

      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt
    }

    enum MeetingStatus {
      REQUESTED
      CONFIRMED
      REJECTED
      CANCELLED
    }

    model Message {
      id        String @id @default(cuid())
      content   String
      isReadBySupervisor Boolean @default(false)
      isReadByStudent    Boolean @default(false) // At least one student in the group

      senderId  String
      sender    User   @relation("MessageSender", fields: [senderId], references: [id])

      // Chat is between a group and their supervisor, so it's tied to a project
      projectId String
      project   Project @relation("ProjectChat", fields: [projectId], references: [id])

      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt
    }

    model GroupInvitation {
      id        String            @id @default(cuid())
      status    InvitationStatus  @default(PENDING) // PENDING, ACCEPTED, REJECTED

      groupId   String
      group     Group             @relation(fields: [groupId], references: [id], onDelete: Cascade)

      invitedUserId String
      invitedUser   User              @relation("InvitedToGroup", fields: [invitedUserId], references: [id])

      inviterId String // The user ID of the group leader who sent the invitation
      inviter   User              @relation("SentGroupInvitations", fields: [inviterId], references: [id])

      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt

      @@unique([groupId, invitedUserId]) // A user can only be invited once to the same group
    }

    enum InvitationStatus {
      PENDING
      ACCEPTED
      REJECTED
    }